# This file was generated. Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

interface Entity {
  createdAt: Long!
  id: ID!
}

interface Paginated {
  pagination: Pagination!
}

type AgentAuthentication {
  token: String!
}

type AgentEvent {
  authentication: AgentAuthentication
  scrape: ScrapeRequest
}

type ApiUrls {
  webToFeed: String!
  webToPageChange: String!
}

type Article implements Entity {
  "  nativeFeedId: ID!"
  bucket: Bucket
  context: ArticleContext!
  createdAt: Long!
  id: ID!
  status: ArticleReleaseStatus!
  streamId: ID!
  type: ArticleType!
  "  nativeFeed: NativeFeed!"
  webDocument: WebDocument!
  webDocumentId: ID!
}

type ArticleContext {
  articleId: ID!
  articles(page: Int!): [Article!]!
  links(page: Int!): [WebDocument!]!
}

type ArticlesResponse implements Paginated {
  articles: [Article!]!
  pagination: Pagination!
}

type Authentication {
  corrId: ID!
  token: String!
}

type AuthenticationEvent {
  authentication: Authentication
  confirmCode: ConfirmCode
  message: AuthenticationEventMessage
}

type AuthenticationEventMessage {
  isError: Boolean!
  message: String!
}

type Bucket implements Entity {
  createdAt: Long!
  description: String!
  histogram(frame: HistogramFrame!): Histogram!
  id: ID!
  imageUrl: String
  """

  articles(filter: ArticlesWhereInput!): PagedArticlesResponse!
  importers: [Importer!]
  articlesCount: ArticlesCount!
  """
  importersCount: Int!
  ownerId: ID!
  streamId: ID!
  tags: [String!]
  title: String!
  visibility: Visibility!
  "  emails: String"
  webhook: String
  websiteUrl: String
}

type BucketOrNativeFeed {
  bucket: Bucket
  feed: NativeFeed
}

type BucketsResponse implements Paginated {
  buckets: [Bucket!]!
  pagination: Pagination!
}

type ConfirmCode {
  length: Int!
  otpId: ID!
}

type Enclosure {
  duration: Long
  size: Long
  type: String!
  url: String!
}

type Feature {
  name: FeatureName!
  state: FeatureState!
  value: FeatureValue!
}

type FeatureBooleanValue {
  value: Boolean!
}

type FeatureIntValue {
  value: Int!
}

type FeatureValue {
  boolVal: FeatureBooleanValue
  numVal: FeatureIntValue
}

type FeedDiscoveryDocument {
  description: String
  favicon: String
  htmlBody: String
  imageUrl: String
  language: String
  mimeType: String
  title: String
  url: String
}

type GenericFeed implements Entity {
  "  nativeFeedId: ID!"
  createdAt: Long!
  feedUrl: String!
  hash: String!
  id: ID!
  specification: GenericFeedSpecification!
}

type GenericFeedSpecification {
  scrapeOptions: ScrapeRequest!
  refineOptions: RefineOptions!
  selectors: Selectors!
}

type GenericFeedsResponse implements Paginated {
  genericFeeds: [GenericFeed!]!
  pagination: Pagination!
}

type Histogram {
  frame: HistogramFrame!
  items: [HistogramItem!]!
}

type HistogramItem {
  count: Int!
  index: String!
}

type SourceSubscription implements Entity {
  id: ID!
  createdAt: Long!
}

type Importer implements Entity {
  id: ID!
  autoRelease: Boolean!
  bucket: Bucket!
  bucketId: ID!
  createdAt: Long!
  filter: String
  histogram(frame: HistogramFrame!): Histogram!
#  email: String
#  webhook: String
  lastUpdatedAt: Long
  nativeFeed: NativeFeed!
  nativeFeedId: ID!
  plugins: [ID!]!
  segmented: Segment
  title: String
}

type ImportersResponse implements Paginated {
  importers: [Importer!]!
  pagination: Pagination!
}

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  authAnonymous: Authentication!
  authConfirmCode(data: ConfirmAuthCodeInput!): Boolean!
  authUser(data: AuthUserInput!): Authentication!
  """

  createGenericFeed(data: GenericFeedCreateInput!): GenericFeed!
  updateGenericFeed(data: GenericFeedUpdateInput!): GenericFeed!
  deleteGenericFeed(data: GenericFeedDeleteInput!): Boolean!
  """
  createApiToken(name: String!): UserSecret!
#  createAgentGroup(data: AgentGroupCreateInput!): AgentGroup!
  createArticle(data: ArticleCreateInput!): Article!
  createBuckets(data: BucketsCreateInput!): [Bucket!]!
  createImporters(data: ImportersCreateInput!): [Importer!]!
  createSourceSubscriptions(data: SourceSubscriptionsCreateInput!): [SourceSubscription!]!
  createNativeFeeds(data: CreateNativeFeedsInput!): [NativeFeed!]!
  deleteApiTokens(data: DeleteApiTokensInput!): Boolean!
  deleteArticles(data: ArticlesDeleteWhereInput!): Boolean!
  deleteBucket(data: BucketDeleteInput!): Boolean!
  deleteImporter(data: ImporterDeleteInput!): Boolean!
  deleteNativeFeed(data: NativeFeedDeleteInput!): Boolean!
  logout: Boolean
  submitAgentData(data: SubmitAgentDataInput!): Boolean!
  updateArticles(data: ArticlesUpdateWhereInput!): Boolean!
  updateBucket(data: BucketUpdateInput!): Bucket!
  updateCurrentUser(data: UpdateCurrentUserInput!): Boolean!
  updateImporter(data: ImporterUpdateInput!): Importer!
  updateNativeFeed(data: NativeFeedUpdateInput!): NativeFeed!
}

type Agent {
  secretKeyId: ID!
  ownerId: ID!
  version: String!
  addedAt: Long!
  osInfo: String!
}

type NativeFeed implements Entity {
  "  status: String!"
  autoRelease: Boolean!
  createdAt: Long!
  description: String
  domain: String
  errorMessage: String
  feedUrl: String!
  genericFeed: GenericFeed
  harvestRateFixed: Boolean!
  harvestRateMinutes: Int
  histogram(frame: HistogramFrame!): Histogram!
  iconUrl: String
  id: ID!
  imageUrl: String
  importers: [Importer!]!
  lastChangedAt: Long
  lastCheckedAt: Long
  lat: Long
  lon: Long
  ownerId: ID!
  status: NativeFeedStatus!
  streamId: ID!
  title: String!
  "  nextRefreshAt: Long"
  visibility: Visibility!
  websiteUrl: String
}

type NativeFeedsResponse implements Paginated {
  nativeFeeds: [NativeFeed!]!
  pagination: Pagination!
}

type Pagination {
  isEmpty: Boolean!
  isFirst: Boolean!
  """

  totalPages: Int!
  totalElements: Long!
  """
  isLast: Boolean!
  page: Int!
  pageSize: Int!
}

type Plan {
  availability: PlanAvailability!
  costs: Float!
  features: [Feature!]!
  id: ID!
  isPrimary: Boolean!
  name: PlanName!
}

type PlanSubscription {
  expiry: Long
  plan: Plan!
  planId: ID!
  startedAt: Long!
}

type Plugin {
  description: String!
  id: ID!
  perProfile: Boolean!
  state: FeatureState!
  value: Boolean!
}

type Profile {
  dateFormat: String
  isAnonymous: Boolean!
  isLoggedIn: Boolean!
  minimalFeatureState: FeatureState!
  preferFulltext: Boolean!
  preferReader: Boolean!
  timeFormat: String
  user: User
  userId: ID
}

type Query {
  agents: [Agent!]!
  article(data: ArticleWhereInput!): Article!
  articles(data: ArticlesInput!): ArticlesResponse!
  bucket(data: BucketWhereInput!): Bucket!
  buckets(data: BucketsInput!): BucketsResponse!
  bucketsOrNativeFeeds(data: BucketsOrNativeFeedsInput!): [BucketOrNativeFeed!]!
  scrape(data: ScrapeRequestInput!): ScrapeResponse!
  genericFeed(data: GenericFeedWhereInput!): GenericFeed!
  genericFeeds(data: GenericFeedsInput!): GenericFeedsResponse!
  importer(data: ImporterInput!): Importer!
  importers(data: ImportersInput!): ImportersResponse!
  nativeFeed(data: NativeFeedWhereInput!): NativeFeed!
  nativeFeeds(data: NativeFeedsInput!): NativeFeedsResponse!
  plans: [Plan!]!
  profile: Profile!
  remoteNativeFeed(data: RemoteNativeFeedInput!): RemoteNativeFeed!
  serverSettings(data: ServerSettingsContextInput!): ServerSettings!
  webDocument(data: WebDocumentWhereInput!): WebDocument!
}

input ServerSettingsContextInput {
  host: String!
}

type RefineOptions {
  filter: String
}

type RemoteNativeFeed {
  author: String
  description: String
  expired: Boolean!
  feedUrl: String!
  items: [WebDocument!]
  language: String
  publishedAt: Long!
  title: String!
  websiteUrl: String
}

type RequestHeader {
  name: String
  value: String
}

input RequestHeaderInput {
  name: String
  value: String
}

type ScrapePage {
  timeout: Int
  url: String!
  prerender: ScrapePrerender
  actions: [ScrapeAction!]
}

type ScrapeAction {
  click: DOMElement
  type: DOMActionType
  wait: WaitAction
  select: DOMActionSelect
  cookie: CookieValue
  header: RequestHeader
}

input ScrapeActionInput {
  click: DOMElementInput
  type: DOMActionTypeInput
  wait: WaitActionInput
  select: DOMActionSelectInput
  cookie: CookieValueInput
  header: RequestHeaderInput
}

type CookieValue {
  value: String!
}

input CookieValueInput {
  value: String!
}

type DOMElement {
  element: DOMElementByNameOrXPath
  iframe: IframeByXPath
  position: XYPosition
}

type XYPosition {
  x: Int!
  y: Int!
}

type WaitAction {
  element: DOMElementByNameOrXPath
}
input WaitActionInput {
  element: DOMElementByNameOrXPathInput
}

type IframeByXPath {
  xpath: DOMElementByXPath!
  nestedElement: DOMElementByNameOrXPath!
}
input DOMElementInput {
  element: DOMElementByNameOrXPathInput
  iframe: IframeByXPathInput
  position: XYPositionInput
}

input XYPositionInput {
  x: Int!
  y: Int!
}

input IframeByXPathInput {
  xpath: DOMElementByXPathInput!
  nestedElement: DOMElementByNameOrXPathInput
}

type DOMActionType {
  element: DOMElementByXPath!
  typeValue: String!
}
input DOMActionTypeInput {
  element: DOMElementByXPathInput!
  typeValue: String!
}

type DOMActionSelect {
  element: DOMElementByXPath!
  selectValue: String!
}
input DOMActionSelectInput {
  element: DOMElementByXPathInput!
  selectValue: String!
}

type DOMElementByNameOrXPath {
  name: DOMElementByName
  xpath: DOMElementByXPath
}
input DOMElementByNameOrXPathInput {
  name: DOMElementByNameInput
  xpath: DOMElementByXPathInput
}

type DOMElementByXPath {
  value: String!
}
input DOMElementByXPathInput {
  value: String!
}

type DOMElementByName {
  value: String!
}
input DOMElementByNameInput {
  value: String!
}

input ScrapePageInput {
  timeout: Int
  url: String!
  prerender: ScrapePrerenderInput
  actions: [ScrapeActionInput!]
}

type ScrapePrerender {
  viewport: ViewPort
  waitUntil: PuppeteerWaitUntil!
}

input ScrapePrerenderInput {
  viewport: ViewPortInput
  waitUntil: PuppeteerWaitUntil!
  agents: [AgentInput!]
}

input AgentInput {
  secretKeyId: ID!
}

type ViewPort {
  width: Int!
  height: Int!
  isMobile: Boolean!
  isLandscape: Boolean
}

input ViewPortInput {
  width: Int!
  height: Int!
  isMobile: Boolean!
  isLandscape: Boolean
}

type ScrapeDebugOptions {
  screenshot: Boolean
  console: Boolean
  network: Boolean
  cookies: Boolean
  html: Boolean
}

input ScrapeDebugOptionsInput {
  screenshot: Boolean
  console: Boolean
  network: Boolean
  cookies: Boolean
  html: Boolean
}

type ScrapeDebugTimes {
  render: Int!
  queue: Int!
}

input ScrapeDebugTimesInput {
  render: Int!
  queue: Int!
}

type ScrapeDebugResponse {
  corrId: String!
  screenshot: String
  prerendered: Boolean!
  console: [String!]!
  network: [NetworkRequest!]!
  cookies: [String!]
  html: String
  statusCode: Int!
  contentType: String
  viewport: ViewPort
  metrics: ScrapeDebugTimes!
}

input ScrapeDebugResponseInput {
  corrId: String!
  screenshot: String
  prerendered: Boolean!
  console: [String!]!
  network: [NetworkRequestInput!]!
  cookies: [String!]
  html: String
  statusCode: Int!
  contentType: String
  viewport: ViewPortInput
  metrics: ScrapeDebugTimesInput!
}

type NetworkRequest {
  url: String
  requestHeaders: String
  requestPostData: String
  responseHeaders: String
  responseSize: Int
  responseBody: String
}

input NetworkRequestInput {
  url: String
  requestHeaders: String
  requestPostData: String
  responseHeaders: String
  responseSize: Int
  responseBody: String
}

type Segment {
  digest: Boolean!
  scheduleExpression: String!
  size: Int!
  sortAsc: Boolean!
  sortBy: String!
}

type Selectors {
  contextXPath: String!
  dateIsStartOfEvent: Boolean!
  dateXPath: String!
  extendContext: ExtendContentOptions!
  linkXPath: String!
}

type ServerSettings {
  apiUrls: ApiUrls!
  features: [Feature!]!
}

type Subscription {
  authViaMail(email: String!, token: String!): AuthenticationEvent!
  registerAgent(data: RegisterAgentInput!): AgentEvent!
  registerCli: AuthenticationEvent!
  agents: [Agent!]!
}

type TransientGenericFeed {
  count: Int
  feedUrl: String!
  hash: String!
  samples: [WebDocument!]!
  score: Float!
  selectors: Selectors!
}

type RemoteNativeFeedRef {
  description: String
  title: String!
  type: String!
  url: String!
}

type RemoteOrExistingNativeFeed {
  existing: NativeFeed
  remote: RemoteNativeFeedRef
}

type User implements Entity {
  acceptedTermsAndServices: Boolean!
  createdAt: Long!
  email: String!
  id: ID!
  name: String!
  notificationsStreamId: ID!
  plugins: [Plugin!]!
  purgeScheduledFor: Long
  secrets: [UserSecret!]!
  subscription: PlanSubscription
  subscriptionId: ID
}

type UserSecret {
  id: ID!
  lastUsed: Long
  type: UserSecretType!
  validUntil: Long
  value: String!
  valueMasked: Boolean!
}

type WebDocument implements Entity {
  contentRaw: String
  contentRawMime: String
  contentText: String
  contentTitle: String
  createdAt: Long!
  description: String!
  enclosures: [Enclosure!]
  id: ID!
  imageUrl: String
  pendingPlugins: [String!]!
  publishedAt: Long!
  startingAt: Long
  tags: [String!]
  title: String!
  updatedAt: Long
  url: String!
}

type ScrapedElementMeta {
  favicon: String
  htmlBody: String
  imageUrl: String
  title: String
  description: String
  mimeType: String
  language: String
  url: String
}

enum ArticleReleaseStatus {
  dropped
  released
  unreleased
}

enum ArticleType {
  feed
  ops
}

enum ContentCategoryTag {
  commercial
  kids
  online
  sports
}

enum ContentSortTag {
  newest
  oldest
}

enum ContentTypeTag {
  AUDIO
  FULLTEXT
  LONG
  SHORT
  VIDEO
}

enum ExtendContentOptions {
  NEXT
  NONE
  PREVIOUS
  PREVIOUS_AND_NEXT
}

enum FeatureName {
  api
  authMail
  authRoot
  authSSO
  authentication
  bucketsAccessOther
  bucketsMaxCount
  bucketsPrivateAccess
  database
  elasticsearch
  feedAuthentication
  feedsFulltext
  feedsMaxCount
  feedsMaxRefreshRate
  feedsPrivateAccess
  genFeedFromFeed
  genFeedFromPageChange
  genFeedFromWebsite
  genFeedWithPrerender
  genFeedWithPuppeteerScript
  itemEmailForward
  itemWebhookForward
  itemsInlineImages
  itemsNoUrlShortener
  itemsRetention
  notifications
  puppeteer
  rateLimit
}

enum FeatureState {
  beta
  experimental
  off
  stable
}

enum HistogramFrame {
  last_month
}

enum NativeFeedStatus {
  defective
  disabled
  never_fetched
  not_found
  ok
  service_unavailable
}

enum PlanAvailability {
  available
  by_request
  unavailable
}

enum PlanName {
  basic
  free
}

enum PuppeteerWaitUntil {
  domcontentloaded
  load
  networkidle0
  networkidle2
}

enum SortField {
  publishedAt
}

enum SortOrder {
  asc
  desc
}

enum UserSecretType {
  Jwt
  SecretKey
}

enum Visibility {
  isPrivate
  isPublic
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"A JSON scalar"
scalar JSON

"A 64-bit signed integer"
scalar Long

input ArticleCreateInput {
  data: ArticleCreateOrConnectInput!
  reference: BucketOrNativeFeedOrArticleWhereInput
}

input ArticleCreateOrConnectInput {
  connect: ArticleUniqueWhereInput
  create: ArticleInput
}

input ArticleInput {
  status: ArticleReleaseStatusUpdateOperationsInput
}

input ArticleMultipleWhereInput {
  in: [ArticleUniqueWhereInput!]!
}

input ArticleReleaseStatusFilterInput {
  oneOf: [ArticleReleaseStatus!]!
}

input ArticleReleaseStatusUpdateOperationsInput {
  set: ArticleReleaseStatus!
}

input ArticleTypeFilterInput {
  oneOf: [ArticleType!]!
}

input ArticleUniqueWhereInput {
  id: ID!
}

input ArticleWhereInput {
  where: ArticleUniqueWhereInput!
}

input ArticlesDeleteWhereInput {
  where: ArticleMultipleWhereInput!
}

input ArticlesInput {
  cursor: Cursor!
  orderBy: ArticlesOrderByInput
  where: ArticlesWhereInput!
}

input ArticlesOrderByInput {
  createdAt: SortOrder
  releasedAt: SortOrder
  title: SortOrder
}

input ArticlesUpdateWhereInput {
  data: ArticleInput!
  where: ArticleMultipleWhereInput!
}

input ArticlesWhereInput {
  createdAt: DateFilter
  like: ArticleUniqueWhereInput
  status: ArticleReleaseStatusFilterInput
  stream: StreamWhereInput!
  type: ArticleTypeFilterInput
}

input AuthUserInput {
  email: String!
  secretKey: String!
}

input BoolUpdateOperationsInput {
  set: Boolean!
}

input BucketCreateInput {
  title: String!
  description: String!
  importers: [ImportersCreateWithoutBucketInput!]
  retention: RetentionInput
  visibility: Visibility
}

input RetentionInput {
  maxItems: Int
  maxAgeDays: Int
  maxMemoryMb: Int
}

input BucketCreateOrConnectInput {
  connect: BucketUniqueWhereInput
  create: BucketCreateInput
}

input WebhookCreateOrConnectInput {
  connect: WebhookUniqueWhereInput
  create: WebhookCreateInput
}

input WebhookCreateInput {
  url: String!
}

input SinkOrConnectInput {
#  bucket: BucketCreateOrConnectInput
  webhook: WebhookCreateOrConnectInput
}

input SinkCreateInput {
  bucket: BucketCreateInput
  webhook: String
}

input BucketDeleteInput {
  keepFeeds: Boolean!
  where: BucketUniqueWhereInput!
}

input BucketOrNativeFeedOrArticleWhereInput {
  article: ArticleUniqueWhereInput
  bucket: BucketUniqueWhereInput
  nativeFeed: NativeFeedUniqueWhereInput
}

input BucketUniqueWhereInput {
  id: ID!
}

input WebhookUniqueWhereInput {
  id: ID!
}

input BucketUpdateDataInput {
  description: NullableStringUpdateOperationsInput
  imageUrl: NullableStringUpdateOperationsInput
  name: NullableStringUpdateOperationsInput
  tags: NullableStringArrayUpdateOperationsInput
  visibility: VisibilityUpdateOperationsInput
  websiteUrl: NullableStringUpdateOperationsInput
}

input BucketUpdateInput {
  data: BucketUpdateDataInput!
  where: BucketUniqueWhereInput!
}

input BucketWhereInput {
  where: BucketUniqueWhereInput!
}

input BucketsCreateInput {
  buckets: [BucketCreateInput!]!
}

input BucketsInput {
  cursor: Cursor!
  orderBy: OrderByInput
  where: BucketsWhereInput
}

input BucketsOneOfWhereInput {
  oneOf: [ID!]!
}

input BucketsOrNativeFeedsInput {
  cursor: Cursor!
  orderBy: OrderByInput
  where: BucketsWhereInput
}

input BucketsWhereInput {
  id: StringFilter
  tags: StringArrayFilter
}

input ConfirmAuthCodeInput {
  code: String!
  otpId: ID!
}

input ContentInput {
  contentRaw: String
  contentRawMime: String
  contentText: String!
  publishedAt: Long!
  title: String!
  url: String!
}

input CreateNativeFeedsInput {
  feeds: [NativeGenericOrFragmentFeedCreateInput!]!
}

input Cursor {
  page: Int!
  pageSize: Int
}

input DateFilter {
  gt: Long
  lt: Long
}

input DeleteApiTokensInput {
  where: UserSecretWhereInput!
}

input FilterInput {
  filter: String!
}

input FragmentFeedCreateInput {
  compareBy: ScrapeEmitType!
  scrapeOptions: ScrapeRequestInput!
  fragment: FragmentInput!
  fragmentXpath: String! # todo remove
  refreshRate: RefreshRate!
  title: String!
}

# todo rename to FragmentCompareByType
enum ScrapeEmitType {
  markup
  pixel
  text
}

input FragmentInput {
  genericFeed: SelectorsInput
  boundingBox: BoundingBoxInput
  xpath: DOMElementByXPathInput
}

type Fragment {
  boundingBox: BoundingBox
  xpath: DOMElementByXPath
}

input BoundingBoxInput {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

type BoundingBox {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

input GenericFeedCreateInput {
  description: String
  language: String
  plugins: [ID!]
  specification: GenericFeedSpecificationInput!
  title: String!
}

input GenericFeedDeleteInput {
  genericFeed: GenericFeedUniqueWhereInput!
}

input GenericFeedSpecificationInput {
  scrapeOptions: ScrapeRequestInput!
  refineOptions: RefineOptionsInput!
  selectors: SelectorsInput!
}

input GenericFeedUniqueWhereInput {
  id: ID!
}

input GenericFeedUpdateDataInput {
  description: NullableStringUpdateOperationsInput
  specification: GenericFeedSpecificationInput!
  title: StringUpdateOperationsInput
}

input GenericFeedUpdateInput {
  data: GenericFeedUpdateDataInput!
  where: GenericFeedUniqueWhereInput!
}

input GenericFeedWhereInput {
  where: GenericFeedUniqueWhereInput!
}

input GenericFeedsInput {
  cursor: Cursor!
  where: GenericFeedsWhereInput!
}

input GenericFeedsWhereInput {
  websiteUrl: String
}

input ImporterAttributesInput {
  autoRelease: Boolean
  filter: String
  plugins: [ID!]
  "  refreshRate: RefreshRate"
  segmented: SegmentInput
  title: String
}

input ImporterDeleteInput {
  where: ImporterUniqueWhereInput!
}

input ImporterInput {
  bucketAndFeed: ImporterWhereBucketAndFeedInput
  importer: SourceSubscriptionUniqueWhereInput
}

input ImporterUniqueWhereInput {
  id: ID!
}

input SourceSubscriptionUniqueWhereInput {
  id: ID!
}

input ImporterUpdateInput {
  importer: ImporterAttributesInput!
  where: ImporterUniqueWhereInput!
}
input ImporterWhereBucketAndFeedInput {
  bucket: BucketUniqueWhereInput!
  nativeFeed: NativeFeedUniqueWhereInput!
}

input ImportersCreateInput {
  bucket: BucketCreateOrConnectInput!
  feeds: [NativeFeedCreateOrConnectInput!]!
  protoImporter: ImporterAttributesInput!
}

input SourceSubscriptionsCreateInput {
  subscriptions: [SourceSubscriptionCreateInput!]!
}

input SourceSubscriptionCreateInput {
  sources: [ScrapeSourceCreateOrConnectInput!]!
  sourceOptions: SourceOptionsInput!
  sinkOptions: SinkOptionsInput!
  additionalSinks: [SinkOrConnectInput!]!
}

input SinkOptionsInput {
  segmented: SegmentInput
  bucket: BucketCreateInput!
}

input SourceOptionsInput {
  refreshCron: String!
  plugins: [PluginInput!]!
}

input PluginInput {
  pluginId: ID!
  data: String
}

input ImportersCreateWithoutBucketInput {
  feeds: [NativeFeedCreateOrConnectInput!]!
  protoImporter: ImporterAttributesInput!
}

input ImportersInput {
  cursor: Cursor!
  orderBy: OrderByInput
  where: ImportersWhereInput
}

input ImportersWhereInput {
  buckets: BucketsOneOfWhereInput
  status: NativeFeedStatusOneOfInput
}

input NativeFeedCreateInput {
  description: String
  feedUrl: String!
  imageUrl: String
  language: String
  lat: Long
  lon: Long
  plugins: [ID!]
  title: String!
  visibility: Visibility
  websiteUrl: String
}

input NativeFeedCreateOrConnectInput {
  connect: NativeFeedUniqueWhereInput
  create: NativeGenericOrFragmentFeedCreateInput
}

input ScrapeSourceCreateOrConnectInput {
  connect: ScrapeSourceUniqueWhereInput
  create: ScrapeRequestInput
}


input NativeFeedDeleteInput {
  nativeFeed: NativeFeedUniqueWhereInput!
}

input NativeFeedStatusOneOfInput {
  oneOf: [NativeFeedStatus!]!
}

input NativeFeedUniqueWhereInput {
  id: ID!
}

input ScrapeSourceUniqueWhereInput {
  id: ID!
}

input NativeFeedUpdateDataInput {
  """

  websiteUrl: NullableStringUpdateOperationsInput
  imageUrl: NullableStringUpdateOperationsInput
  language: NullableStringUpdateOperationsInput
  """
  feedUrl: StringUpdateOperationsInput
  harvestRateFixed: BoolUpdateOperationsInput
  """

  title: StringUpdateOperationsInput
  description: NullableStringUpdateOperationsInput
  lat: NullableLongUpdateOperationsInput
  lon: NullableLongUpdateOperationsInput
  """
  harvestRateMinutes: NullableIntUpdateOperationsInput
  "  autoRelease: BoolUpdateOperationsInput"
  plugins: NullableStringArrayUpdateOperationsInput
  "  inlineImages: BoolUpdateOperationsInput"
  visibility: VisibilityUpdateOperationsInput
}

input NativeFeedUpdateInput {
  data: NativeFeedUpdateDataInput!
  where: NativeFeedUniqueWhereInput!
}

input NativeFeedWhereInput {
  where: NativeFeedUniqueWhereInput!
}

input NativeFeedsInput {
  cursor: Cursor!
  orderBy: OrderByInput
  where: NativeFeedsWhereInput!
}

input NativeFeedsWhereInput {
  feedUrl: String
  status: NativeFeedStatusOneOfInput
  visibility: VisibilityOneOfInput
}

input NativeGenericOrFragmentFeedCreateInput {
  fragmentFeed: FragmentFeedCreateInput
  genericFeed: GenericFeedCreateInput
  nativeFeed: NativeFeedCreateInput
}

input NullableBoolUpdateOperationsInput {
  set: Boolean
}

input NullableIntUpdateOperationsInput {
  set: Int
}

input NullableLongUpdateOperationsInput {
  set: Long
}

input NullablePluginUpdateOperationsInput {
  id: ID!
  value: NullableBoolUpdateOperationsInput!
}

input NullableStringArrayUpdateOperationsInput {
  set: [String!]
}

input NullableStringUpdateOperationsInput {
  set: String
}

input NullableUpdateOperationsInput {
  assignNull: Boolean!
}

input OrderByInput {
  createdAt: SortOrder
  title: SortOrder
}

input RefineOptionsInput {
  filter: String
}

input RefreshRate {
  scheduled: ScheduledRefreshRate!
}

input RegisterAgentInput {
  secretKey: SecretKey!
  os: OsInfo!
  version: String!
}

input OsInfo {
  arch: String!
  platform: String!
}

input RemoteNativeFeedInput {
  applyFilter: FilterInput
  nativeFeedUrl: String!
}

input ScheduledRefreshRate {
  expression: String!
}

type ScrapedFeeds {
  genericFeeds: [TransientGenericFeed!]!
  nativeFeeds: [RemoteOrExistingNativeFeed!]
}

type ScrapedReadability {
  url: String
  imageUrl: String
  title: String
  contentText: String
  content: String
  contentMime: String
  faviconUrl: String
  date: String
}

input SecretKey {
  email: String!
  secretKey: String!
}

input SegmentInput {
  digest: Boolean!
  scheduleExpression: String!
  size: Int!
  sortAsc: Boolean!
  sortBy: String!
}

input SelectorsInput {
  contextXPath: String!
  dateIsStartOfEvent: Boolean
  dateXPath: String
  extendContext: ExtendContentOptions
  linkXPath: String!
}

input StreamWhereInput {
  bucket: BucketsWhereInput
  feed: NativeFeedsWhereInput
  id: StringFilter
}

input StringArrayFilter {
  every: [String!]
  some: [String!]
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
}

input StringUpdateOperationsInput {
  set: String!
}

input SubmitAgentDataInput {
  corrId: ID!
  jobId: ID!
  scrapeResponse: ScrapeResponseInput!
}

input UpdateCurrentUserInput {
  acceptedTermsAndServices: BoolUpdateOperationsInput
  plugins: [NullablePluginUpdateOperationsInput!]
  purgeScheduledFor: NullableUpdateOperationsInput
}

input UserSecretCreateInput {
  type: UserSecretType!
}

input UserSecretWhereInput {
  in: [String!]!
}

input VisibilityOneOfInput {
  oneOf: [Visibility!]!
}

input VisibilityUpdateOperationsInput {
  set: Visibility!
}

input WebDocumentUniqueWhereInput {
  id: ID!
}

input WebDocumentWhereInput {
  where: WebDocumentUniqueWhereInput!
}

type ScrapeResponse {
  failed: Boolean!
  errorMessage: String
  url: String!
  debug: ScrapeDebugResponse!
  elements: [ScrapedElement!]!
}

type ScrapedElement {
  image: ScrapedByBoundingBox
  selector: ScrapedBySelector
}

type ScrapedBySelector {
  xpath: DOMElementByXPath!
  html: TextData
  text: TextData
  pixel: Base64Data
  fields: [ScrapedField!]
}

type InternalTransfomer {
  transformer: MarkupTransformer
  transformerData: MarkupTransformerData
}

type MarkupTransformerData {
  genericFeed: Selectors
}

type ExternalTransformer {
  transformerId: ID!
  transformerData: String
}

type ScrapedField {
  name: String!
  transformer: ScrapedFieldByTransformer
  xpath: DOMElementByXPath
  value: ScrapedFieldValue
}

type ScrapedFieldByTransformer {
  internal: MarkupTransformer
  external: String
}

type ScrapedFieldValue {
  one: ScrapedSingleFieldValue
  many: [ScrapedSingleFieldValue!]
  nested: [ScrapedField!]
}

type ScrapedSingleFieldValue {
  mimeType: String!
  data: String!
}

type ScrapedByBoundingBox {
  boundingBox: BoundingBox!
  data: Base64Data!
}

type JsonData {
  jsonSchema: String!
  jsonData: String!
}

type Base64Data {
  base64Data: String!
}

type TextData {
  mimeType: String!
  data: String!
}

input ScrapeRequestInput {
  page: ScrapePageInput!
  debug: ScrapeDebugOptionsInput
  emit: [ScrapeEmitInput!]!
}

input ScrapeEmitInput {
  imageBased: ScrapeBoundingBoxInput
  selectorBased: ScrapeSelectorInput
}

input ScrapeBoundingBoxInput {
  boundingBox: BoundingBoxInput!
}


input ScrapeSelectorInput {
  xpath: DOMElementByXPathInput!
  min: Int
  max: Int
  expose: ScrapeSelectorExposeInput!
}

input ScrapeSelectorExposeInput {
  pixel: Boolean
  transformers: [TransformerInternalOrExternalInput!]
  fields: [ScrapeSelectorExposeFieldInput!]
}

input TransformerInternalOrExternalInput {
  internal: InternalTransformerInput
  external: ExternalTransformerInput
}

type TransformerInternalOrExternal {
  internal: InternalTransformer
  external: ExternalTransformer
}

input InternalTransformerInput {
  transformer: MarkupTransformer
  transformerData: MarkupTransformerDataInput
}

type InternalTransformer {
  transformer: MarkupTransformer
  transformerData: MarkupTransformerData
}

input MarkupTransformerDataInput {
  genericFeed: SelectorsInput
}

enum MarkupTransformer {
  feed
  feeds
  readability
}

input ExternalTransformerInput {
  transformerId: ID!
  transformerData: String
}

input ScrapeSelectorExposeFieldInput {
  name: String!
  value: ScrapeSelectorExposeFieldValueInput
  nested: ScrapeSelectorExposeNestedFieldValueInput
  min: Int
  max: Int
}

input ScrapeSelectorExposeNestedFieldValueInput {
  fields: [ScrapeSelectorExposeFieldInput!]!
}

input ScrapeSelectorExposeFieldValueInput {
  html: ScrapeSelectorExposeFieldHtmlValueInput
  text: ScrapeSelectorExposeFieldTextValueInput
  set: String
}

input ScrapeSelectorExposeFieldTextValueInput {
  regex: String!
}

input ScrapeSelectorExposeFieldHtmlValueInput {
  xpath: DOMElementByXPathInput!
}

type ScrapeRequest {
  corrId: ID!
  id: ID!
  page: ScrapePage!
  debug: ScrapeDebugOptions
  emit: [ScrapeEmit!]!
}

type ScrapeEmit {
  imageBased: ScrapeBoundingBox
  selectorBased: ScrapeSelector
}

type ScrapeBoundingBox {
  boundingBox: BoundingBox!
}

type ScrapeSelector {
  xpath: DOMElementByXPath!
  min: Int
  max: Int
  expose: ScrapeSelectorExpose!
}

type ScrapeSelectorExpose {
  pixel: Boolean
  transformers: [TransformerInternalOrExternal!]
  fields: [ScrapeSelectorExposeField!]
}

type ScrapeSelectorExposeField {
  name: String!
  value: ScrapeSelectorExposeFieldValue
  nested: ScrapeSelectorExposeNestedFieldValue
  min: Int
  max: Int
}

type ScrapeSelectorExposeNestedFieldValue {
  fields: [ScrapeSelectorExposeField!]!
}

type ScrapeSelectorExposeFieldValue {
  html: ScrapeSelectorExposeFieldHtmlValue
  text: ScrapeSelectorExposeFieldTextValue
  set: String
}

type ScrapeSelectorExposeFieldTextValue {
  regex: String!
}

type ScrapeSelectorExposeFieldHtmlValue {
  xpath: DOMElementByXPath!
}

input ScrapeResponseInput {
  failed: Boolean!
  errorMessage: String
  url: String!
  debug: ScrapeDebugResponseInput!
  elements: [ScrapedElementInput!]!
}

input ScrapedElementInput {
  image: ScrapedByBoundingBoxInput
  selector: ScrapedBySelectorInput
}

input ScrapedBySelectorInput {
  xpath: DOMElementByXPathInput!
  html: TextDataInput
  text: TextDataInput
  pixel: Base64DataInput
  fields: [ScrapedFieldInput!]
}

input ScrapedFieldInput {
  name: String!
  xpath: TextDataInput
  value: ScrapedFieldValueInput
}

input ScrapedFieldValueInput {
  one: ScrapedSingleFieldValueInput
  many: [ScrapedSingleFieldValueInput!]
  nested: [ScrapedFieldInput!]
}

input ScrapedSingleFieldValueInput {
  mimeType: String!
  data: String!
}

input ScrapedByBoundingBoxInput {
  boundingBox: BoundingBoxInput!
  data: Base64DataInput!
}

input JsonDataInput {
  jsonSchema: String!
  jsonData: String!
}

input Base64DataInput {
  base64Data: String!
}

input TextDataInput {
  data: String!
}
