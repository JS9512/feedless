schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

interface Paginated {
  pagination: Pagination!
}

type AgentAuthentication {
  token: String!
}

type AgentEvent {
  callbackId: ID!
  corrId: ID!
  authentication: AgentAuthentication
  scrape: ScrapeRequest
}

type Authentication {
  corrId: ID!
  token: String!
}

type AuthenticationEvent {
  authentication: Authentication
  confirmCode: ConfirmCode
}

type ConfirmCode {
  length: Int!
  otpId: ID!
}

type Enclosure {
  duration: Long
  size: Long
  type: String!
  url: String!
}

type FeatureGroup {
  id: ID!
  name: String!
  parentId: ID
  features: [Feature!]!
}

type Feature {
  id: String!
  name: FeatureName!
  value: FeatureValue!
}

type FeatureBooleanValue {
  value: Boolean!
}

type FeatureIntValue {
  value: Long!
}

type FeatureValue {
  id: ID!
  boolVal: FeatureBooleanValue
  numVal: FeatureIntValue
}

type DocumentFrequency {
  count: Int!
  group: Long!
}

type Repository {
  id: ID!
  description: String!
  title: String!
  shareKey: String!
  ownerId: ID!
  product: ProductCategory!
  visibility: Visibility!
  refreshCron: String!
  tags: [String!]!
#  pulls: Int
  sunset: SunSetPolicy
  createdAt: Long!
  lastUpdatedAt: Long!
  nextUpdateAt: Long
  documentCount: Long!
#  documentCountSinceCreation: Long!
  disabledFrom: Long
  archived: Boolean!
  frequency(groupBy: WebDocumentDateField!): [DocumentFrequency!]
  plugins: [PluginExecution!]
  cronRuns: [CronRun!]!
  segmented: Segment
  retention: Retention!
  sources: [ScrapeRequest!]
}

type CronRun {
  isSuccessful: Boolean!
  message: String!
  executedAt: Long!
}

type SunSetPolicy {
  afterTimestamp: Long
  afterSnapshots: Int
}

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  authAnonymous: Authentication!
  authConfirmCode(data: ConfirmAuthCodeInput!): Boolean!
  createAnnotation(data: CreateAnnotationInput!): Annotation!
  deleteAnnotation(data: DeleteAnnotationInput!): Boolean!

  authUser(data: AuthUserInput!): Authentication!
  createUserSecret: UserSecret!
  deleteUserSecrets(data: DeleteUserSecretsInput!): Boolean!

  createRepositories(data: RepositoriesCreateInput!): [Repository!]!
  updateRepository(data: RepositoryUpdateInput!): Repository!
  deleteRepository(data: RepositoryUniqueWhereInput!): Boolean!

  logout: Boolean
  submitAgentData(data: SubmitAgentDataInput!): Boolean!
  updateCurrentUser(data: UpdateCurrentUserInput!): Boolean!
  updateLicense(data: UpdateLicenseInput!): LocalizedLicense!

  createWebDocuments(data: [CreateWebDocumentInput!]!): [WebDocument!]!
  updateWebDocument(data: UpdateWebDocumentInput!): Boolean!
  deleteWebDocuments(data: DeleteWebDocumentsInput!): Boolean!

  deleteFeatureValue(data: DeleteFeatureValueInput!): Boolean!
  updateFeatureValue(data: UpdateFeatureValueInput!): Boolean!

  upsertOrder(data: UpsertOrderInput!): Order!
}

input UpsertOrderInput {
  where: OrderWhereUniqueInput
  create: OrderCreateInput
  update: OrderUpdateInput
}

input OrderUpdateInput {
  price: FloatUpdateOperationsInput
  isOffer: BoolUpdateOperationsInput
  isRejected: BoolUpdateOperationsInput
}

input OrderCreateInput {
  overwritePrice: Float!
  isOffer: Boolean!
  productId: ID!
  paymentMethod: PaymentMethod!
  targetGroup: ProductTargetGroup!
  invoiceRecipientName: String!
  callbackUrl: String!
  invoiceRecipientEmail: String!
  user: UserCreateOrConnectInput!
}

enum ProductTargetGroup {
  individual, eneterprise, other
}

type Order {
  id: ID!
  createdAt: Long!
  userId: ID!
  user: User
  productId: ID!
  product: Product!

  # offer
  isOffer: Boolean!
  offerValidTo: Long
  isOfferRejected: Boolean!

  # payment
  price: Float!
  paymentDueTo: Long
  paymentMethod: PaymentMethod
#  isPaymentFailed: Boolean!
  isPaid: Boolean!
  paidAt: Long
  invoiceRecipientName: String!
  invoiceRecipientEmail: String!

  licenses: [License!]
#  invoices: [Invoice!]
}

enum PaymentMethod {
  Bill
  PayPal
  CreditCard
  Bitcoin
  Ethereum
}

input ProductsUniqueWhereInput {
  id: ID!
}
input OrderWhereUniqueInput {
  id: ID!
}

input UserCreateOrConnectInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  country: String!
  hasAcceptedTerms: Boolean!
}

input UserWhereUniqueInput {
  id: String!
}

input DeleteFeatureValueInput {
  id: ID!
}
input UpdateFeatureValueInput {
  id: ID!
  value: FeatureValueInput!
}

input FeatureValueInput {
  boolVal: FeatureBooleanValueInput
  numVal: FeatureIntValueInput
}

input FeatureBooleanValueInput {
  value: Boolean!
}

input FeatureIntValueInput {
  value: Long!
}

input DeleteAnnotationInput {
  where: WebDocumentUniqueWhereInput!
}

input CreateAnnotationInput {
  where: WebDocumentUniqueWhereInput!
  annotation: OneOfAnnotationInput!
}

input OneOfAnnotationInput {
  upVote: BoolUpdateOperationsInput
  downVote: BoolUpdateOperationsInput
  flag: BoolUpdateOperationsInput
  text: TextAnnotationInput
}

input TextAnnotationInput {
  fromChar: Int!
  toChar: Int!
  document: CreateWebDocumentInput!
}

type Annotation {
  upVote: Boolean!
  downVote: Boolean!
  flag: Boolean!
}

input UpdateLicenseInput {
  licenseRaw: String!
}

input RepositoryUpdateInput {
  where: RepositoryUniqueWhereInput!
  data: RepositoryUpdateDataInput!
}

input RepositoryUpdateDataInput {
  description: NullableStringUpdateOperationsInput
  refreshCron: NullableStringUpdateOperationsInput
  title: StringUpdateOperationsInput
  visibility: VisibilityUpdateOperationsInput
  retention: RetentionUpdateInput
#  location: LatLonLocationInput
  plugins: [PluginExecutionInput!]
  nextUpdateAt: NullableLongUpdateOperationsInput
  sources: SourcesUpdateInput
}

input SourcesUpdateInput {
  remove: [ID!]
  update: [ScrapeRequestUpdateInput!]
  add: [ScrapeRequestInput!]
}

input RetentionUpdateInput {
  maxCapacity: NullableIntUpdateOperationsInput
  maxAgeDays: NullableIntUpdateOperationsInput
  ageReferenceField: WebDocumentDateFieldUpdateOperationsInput
}

input CreateWebDocumentInput {
  contentRawBase64: String
  contentRawMime: String
  contentText: String
  tags: [String!]
  contentTitle: String!
  publishedAt: Long!
  url: String!
  repositoryId: RepositoryUniqueWhereInput!
  parent: WebDocumentUniqueWhereInput
}

input DeleteWebDocumentsInput {
  where: WebDocumentsWhereInput!
}

input UpdateWebDocumentInput {
  where: WebDocumentUniqueWhereInput!
  data: WebDocumentUpdateInput!
}

input WebDocumentUpdateInput {
  contentRawBase64: NullableStringUpdateOperationsInput
  contentRawMime: NullableStringUpdateOperationsInput
  contentText: StringUpdateOperationsInput
  contentTitle: StringUpdateOperationsInput
  tags: StringArrayUpdateOperationsInput
  url: StringUpdateOperationsInput
}

input CreateUserInput {
  email: String!
#  product: ProductCategory!
  newsletter: Boolean!
}

enum ProductCategory {
#  system
  all,
  rssProxy
  visualDiff
  reader
  feedless

#  shouldWeLaunchThis
#  automatedBrowser
#  feedAnanlytics
#  communityThreads
#  localLink like ngrok, traffic forwarding needed for browser life feed
#  teamDraft
#  feedReader
#  blog
  upcoming
  untoldNotes
#  pageChangeTracker
#  digest
#  featureFlags
  feedDump
#  openRoadmap
#  commentOn
}

type Agent {
  secretKeyId: ID!
  ownerId: ID!
  version: String!
  name: String!
  addedAt: Long!
  openInstance: Boolean!
}

type Pagination {
  isEmpty: Boolean!
  isFirst: Boolean!
  isLast: Boolean!
  page: Int!
  pageSize: Int!
}

type Plugin {
  id: ID!
  name: String!
  type: PluginType!
  listed: Boolean!
#  params: PluginParamsSchema
}

#type PluginParamsSchema {
#  schema: String!
#}

enum PluginType {
  entity
  fragment
}

type Session {
  isAnonymous: Boolean!
  isLoggedIn: Boolean!
  user: User
  userId: ID
}

type Query {
  agents: [Agent!]!
  plugins: [Plugin!]!

  repository(data: RepositoryWhereInput!): Repository!
  repositories(data: RepositoriesInput!): [Repository!]!
  countRepositories(data: CountRepositoriesInput!): Int!

  scrape(data: ScrapeRequestInput!): ScrapeResponse!
  session: Session!

  remoteNativeFeed(data: RemoteNativeFeedInput!): RemoteNativeFeed!
  previewFeed(data: PreviewFeedInput!): RemoteNativeFeed!

  serverSettings(data: ServerSettingsContextInput!): ServerSettings!
#  license: License!

  webDocument(data: WebDocumentWhereInput!): WebDocument!
  webDocuments(data: WebDocumentsInput!): [WebDocument!]!
  webDocumentsFrequency(where: WebDocumentsWhereInput!, groupBy: WebDocumentDateField!): [DocumentFrequency!]

  featureGroups(inherit: Boolean!, where: FeatureGroupWhereInput!): [FeatureGroup!]!

  products(data: ProductsWhereInput!): [Product!]!
  orders(data: OrdersInput!): [Order!]!
}

input FeatureGroupWhereInput {
  id: StringFilter
}

input OrdersInput {
  cursor: Cursor!
  where: BillingsWhereInput
}

input BillingsWhereInput {
  id: StringFilter
}

input ProductsWhereInput {
  id: StringFilter
  category: ProductCategory
}

type Product {
  id: ID!
  name: String!
  description: String!
  isCloud: Boolean!
  partOf: ProductCategory
  featureGroupId: ID
  prices: [PricedProduct!]!
}

type PricedProduct {
  id: ID!
  description: String
  price: Float!
  individual: Boolean!
  enterprise: Boolean!
  other: Boolean!
  inStock: Int!
}

input CountRepositoriesInput {
  product: ProductCategory!
}

input StoriesWhereInput {
  best: Boolean!
  newest: Boolean!
}

input PreviewFeedInput {
  requests: [ScrapeRequestInput!]!
  filters: [CompositeFilterParamsInput!]!
  tags: [ConditionalTagInput!]!
}

input WebDocumentsInput {
  cursor: Cursor!
  where: WebDocumentsWhereInput!
  orderBy: WebDocumentOrderByInput
}

input WebDocumentsWhereInput {
  id: StringFilter
  repository: RepositoryUniqueWhereInput!
#  updatedAt: DatesWhereInput
  startedAt: DatesWhereInput
  createdAt: DatesWhereInput
  publishedAt: DatesWhereInput
  localized: GeoPointWhereInput
  tags: StringFilter
}

input GeoPointWhereInput {
  near: GeoPointInput!
  distanceKm: Float!
}

input DatesWhereInput {
  before: Long
  after: Long
}

input DateWhereInput {
  value: DateTime!
}

input ServerSettingsContextInput {
  host: String!
  product: ProductCategory!
}

type RefineOptions {
  filter: String
}

type RemoteNativeFeed {
  expired: Boolean
  feedUrl: String!
  publishedAt: Long!
  tags: [String!]
  title: String!
  author: String
  description: String
  items: [WebDocument!]!
  language: String
  websiteUrl: String
  nextPageUrls: [String!]
}

type RequestHeader {
  name: String
  value: String
}

input RequestHeaderInput {
  name: String
  value: String
}

type ScrapeFlow {
  sequence: [ScrapeAction!]!
#  then: [ScrapeFlow!]
}

type ScrapeAction {
  fetch: HttpFetch
  extract: ScrapeExtract
  execute: PluginExecution
  click: DOMElement
  type: DOMActionType
  wait: WaitAction
  select: DOMActionSelect
  header: RequestHeader
  purge: DOMElementByXPath
}

# @oneOf
input ScrapeActionInput {
  fetch: HttpFetchInput
  click: DOMElementInput
  extract: ScrapeExtractInput
  execute: PluginExecutionInput
  purge: DOMElementByXPathInput
  type: DOMActionTypeInput
  wait: WaitActionInput
  select: DOMActionSelectInput
  header: RequestHeaderInput
}

input ScrapeExtractInput {
  fragmentName: String!
  imageBased: ScrapeBoundingBoxInput
  selectorBased: DOMExtractInput
}

type ScrapeExtract {
  fragmentName: String!
  imageBased: ScrapeBoundingBox
  selectorBased: DOMExtract
}

enum ScrapeEmit {
  text
  html
  pixel
  date
}

input DOMExtractInput {
  fragmentName: String!
  xpath: DOMElementByXPathInput!
  max: Int
  emit: [ScrapeEmit!]!
  extract: [DOMExtractInput!]
}

type DOMExtract {
  fragmentName: String!
  xpath: DOMElementByXPath!
  max: Int
  emit: [ScrapeEmit!]!
  extract: [DOMExtract!]
}

type HttpFetch {
  get: ScrapePrerender!
}

type StringLiteralOrVariable {
  literal: String
  variable: String
}

input StringLiteralOrVariableInput {
  literal: String
  variable: String
}

input HttpFetchInput {
  get: ScrapePrerenderInput!
}

type DOMElement {
  element: DOMElementByNameOrXPath
  position: XYPosition
}

type XYPosition {
  x: Int!
  y: Int!
}

type WaitAction {
  element: DOMElementByNameOrXPath!
}
input WaitActionInput {
  element: DOMElementByNameOrXPathInput!
}

input DOMElementInput {
  element: DOMElementByNameOrXPathInput
  position: XYPositionInput
}

input XYPositionInput {
  x: Int!
  y: Int!
}

type DOMActionType {
  element: DOMElementByXPath!
  typeValue: String!
}
input DOMActionTypeInput {
  element: DOMElementByXPathInput!
  typeValue: String!
}

type DOMActionSelect {
  element: DOMElementByXPath!
  selectValue: String!
}
input DOMActionSelectInput {
  element: DOMElementByXPathInput!
  selectValue: String!
}

type DOMElementByNameOrXPath {
  name: DOMElementByName
  xpath: DOMElementByXPath
}
input DOMElementByNameOrXPathInput {
  name: DOMElementByNameInput
  xpath: DOMElementByXPathInput
}

type DOMElementByXPath {
  value: String!
}
input DOMElementByXPathInput {
  value: String!
}

type DOMElementByName {
  value: String!
}
input DOMElementByNameInput {
  value: String!
}

input ScrapeFlowInput {
  sequence: [ScrapeActionInput!]!
#  then: [ScrapeFlowInput!]
}

type ScrapePrerender {
  url: StringLiteralOrVariable!
  timeout: Int
  viewport: ViewPort
  forcePrerender: Boolean
  language: String
  waitUntil: PuppeteerWaitUntil
  additionalWaitSec: Int
}

input ScrapePrerenderInput {
  timeout: Int
  url: StringLiteralOrVariableInput!
  viewport: ViewPortInput
  forcePrerender: Boolean
  language: String
  additionalWaitSec: Int
  waitUntil: PuppeteerWaitUntil
  agents: [AgentInput!]
}

input AgentInput {
  secretKeyId: ID!
}

type ViewPort {
  width: Int!
  height: Int!
  isMobile: Boolean!
  isLandscape: Boolean!
}

input ViewPortInput {
  width: Int!
  height: Int!
  isMobile: Boolean!
  isLandscape: Boolean!
}

type FetchActionDebugResponse {
  corrId: String!
  url: String!
  screenshot: String
  prerendered: Boolean!
  console: [String!]!
  network: [NetworkRequest!]!
  cookies: [String!]
  html: String
  statusCode: Int
  contentType: String
  viewport: ViewPort!
#  metrics: ScrapeDebugTimes!
}
input FetchActionDebugResponseInput {
  corrId: String!
  screenshot: String
  url: String!
  prerendered: Boolean!
  console: [String!]!
  network: [NetworkRequestInput!]!
  cookies: [String!]
  html: String
  statusCode: Int
  contentType: String
  viewport: ViewPortInput!
#  metrics: ScrapeDebugTimesInput!
}

type NetworkRequest {
  url: String
  requestHeaders: String
  requestPostData: String
  responseHeaders: String
  responseSize: Int
  responseBody: String
}

input NetworkRequestInput {
  url: String
  requestHeaders: String
  requestPostData: String
  responseHeaders: String
  responseSize: Int
  responseBody: String
}

type Segment {
  digest: Boolean!
  size: Int!
  sortAsc: Boolean!
  sortBy: String!
}

type Selectors {
  contextXPath: String!
  dateIsStartOfEvent: Boolean!
  dateXPath: String!
  extendContext: ExtendContentOptions!
  paginationXPath: String!
  linkXPath: String!
}

type ServerSettings {
  gatewayUrl: String!
  appUrl: String!
  build: BuildInfo!
  version: String!
  features: [Feature!]!
  profiles: [ProfileName!]!
  license: LocalizedLicense
}

type BuildInfo {
  date: Long!
  commit: String!
}

type LocalizedLicense {
  isValid: Boolean!
  isLocated: Boolean!
  isTrial: Boolean!
  trialUntil: Long
  data: License
}

type License {
  name: String!
  email: String!
  scope: ProductCategory!
  version: Int!
  createdAt: Long!
}

type Subscription {
  authViaMail(data: AuthViaMailInput!): AuthenticationEvent!
  registerAgent(data: RegisterAgentInput!): AgentEvent!
  agents: [Agent!]!
}

input AuthViaMailInput {
  email: String!
  token: String!
  product: ProductCategory!
  osInfo: String!
  allowCreate: Boolean!
}

type TransientGenericFeed {
  count: Int!
  hash: String!
  score: Float!
  selectors: Selectors!
}

type NativeFeed {
  autoRelease: Boolean!
  createdAt: Long!
  description: String
  domain: String
  errorMessage: String
  feedUrl: String!
  harvestRateFixed: Boolean!
  harvestRateMinutes: Int
  iconUrl: String
  imageUrl: String
  lastChangedAt: Long
  lastCheckedAt: Long
  lat: Long
  lon: Long
  ownerId: ID!
  status: NativeFeedStatus!
  streamId: ID!
  title: String!
  "  nextRefreshAt: Long"
  visibility: Visibility!
  websiteUrl: String
}

type User {
  id: ID!
  hasAcceptedTerms: Boolean!
  hasCompletedSignup: Boolean!
  createdAt: Long!
  email: String!
  firstName: String
  lastName: String
  country: String
  purgeScheduledFor: Long
  notificationRepositoryId: ID
  notificationsLastViewedAt: Long
  secrets: [UserSecret!]!
  plan(product: ProductCategory!): Plan
}

type Plan {
  productId: ID!
  product: Product!
  startedAt: Long
  terminatedAt: Long
}

type UserSecret {
  id: ID!
  lastUsed: Long
  type: UserSecretType!
  validUntil: Long
  value: String!
  valueMasked: Boolean!
}

type WebDocument {
  contentRawBase64: String
  contentRawMime: String
  contentHtml: String
  contentText: String
  contentTitle: String
  tags: [String!]
  createdAt: Long!
  enclosures: [Enclosure!]
  id: ID!
  imageUrl: String
  publishedAt: Long!
  startingAt: Long
  localized: GeoPoint
  updatedAt: Long
  url: String!
}

type ScrapedElementMeta {
  favicon: String
  htmlBody: String
  imageUrl: String
  title: String
  description: String
  mimeType: String
  language: String
  url: String
}

enum ExtendContentOptions {
  NEXT
  NONE
  PREVIOUS
  PREVIOUS_AND_NEXT
}

enum ProfileName {
  dev
  authSSO
  authMail
  selfHosted
}
enum FeatureName {
  canActivatePlan
  canJoinPlanWaitList

  requestPerMinuteUpperLimitInt
  refreshRateInMinutesLowerLimit
  publicRepository

  scrapeRequestTimeoutMsec
  repositoryRetentionMaxDaysLowerLimitInt
  repositoryCapacityLowerLimitInt
  repositoryCapacityUpperLimitInt
#  itemEmailForward
#  itemWebhookForward
  plugins
#  scrapeSourceExpiryInDays
  scrapeSourceMaxCountActive
  scrapeRequestMaxCountPerSource
  scrapeRequestActionMaxCount
  scrapeSourceMaxCountTotal
}

enum NativeFeedStatus {
  defective
  disabled
  never_fetched
  not_found
  ok
  service_unavailable
}

enum PuppeteerWaitUntil {
  domcontentloaded
  load
  networkidle0
  networkidle2
}

enum SortField {
  publishedAt
}

enum SortOrder {
  asc
  desc
}

enum UserSecretType {
  Jwt
  SecretKey
}

enum Visibility {
  isPrivate
  isPublic
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"A JSON scalar"
scalar JSON

"A 64-bit signed integer"
scalar Long

input AuthUserInput {
  email: String!
  secretKey: String!
}

input BoolUpdateOperationsInput {
  set: Boolean!
}

input RetentionInput {
  maxCapacity: Int
  maxAgeDays: Int
  ageReferenceField: WebDocumentDateField
}
enum WebDocumentDateField {
  createdAt,
  startingAt,
  publishedAt
}

type Retention {
  maxCapacity: Int
  maxAgeDays: Int
  ageReferenceField: WebDocumentDateField
}

input WebhookCreateOrConnectInput {
  connect: WebhookUniqueWhereInput
  create: WebhookCreateInput
}

input WebhookCreateInput {
  url: String!
}

input WebhookOrEmailInput {
  webhook: WebhookCreateOrConnectInput
  email: String
}

input WebhookUniqueWhereInput {
  id: ID!
}

input RepositoriesInput {
  cursor: Cursor!
  orderBy: WebDocumentOrderByInput
  where: RepositoriesWhereInput
}

input RepositoriesWhereInput {
  product: StringFilter
}

input ConfirmAuthCodeInput {
  code: String!
  otpId: ID!
}

input Cursor {
  page: Int!
  pageSize: Int
}

input DateFilter {
  gt: Long
  lt: Long
}

input DeleteUserSecretsInput {
  where: UserSecretWhereInput!
}

input BoundingBoxInput {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

type BoundingBox {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

input RepositoryWhereInput {
  where: RepositoryUniqueWhereInput!
}

input RepositoryUniqueWhereInput {
  id: ID!
}

input RepositoriesCreateInput {
  repositories: [RepositoryCreateInput!]!
}

input RepositoryCreateInput {
  product: ProductCategory!
  sources: [ScrapeRequestInput!]!
  sinkOptions: SinkOptionsInput!
  additionalSinks: [WebhookOrEmailInput!]
}

input SinkOptionsInput {
  segmented: SegmentInput
  title: String!
  description: String!
  retention: RetentionInput
  refreshCron: String
  withShareKey: Boolean!
  agents: [AgentByGroup!]
  sunset: SunSetPolicyInput
#  location: LatLonLocationInput
  visibility: Visibility
  plugins: [PluginExecutionInput!]
}

#input LatLonLocationInput {
#  lat: Long!
#  lon: Long!
#  description: String
#}

input SunSetPolicyInput {
  afterTimestamp: Long
  afterSnapshots: Int
}

enum StringFilterOperator {
  contains,
  matches,
  endsWith,
  startsWidth
}

enum NumberFilterOperator {
  gt,
  eq,
  lt
}

input AgentByGroup {
  group: String!
}

input PluginExecutionInput {
  pluginId: ID!
  params: PluginExecutionParamsInput!
}

input NullableBoolUpdateOperationsInput {
  set: Boolean
}

input NullableIntUpdateOperationsInput {
  set: Int
}

input WebDocumentDateFieldUpdateOperationsInput {
  set: WebDocumentDateField!
}

input NullableLongUpdateOperationsInput {
  set: Long
}

input FloatUpdateOperationsInput {
  set: Float!
}

input StringArrayUpdateOperationsInput {
  set: [String!]!
}

input NullableStringUpdateOperationsInput {
  set: String
}

input NullableUpdateOperationsInput {
  assignNull: Boolean!
}

input WebDocumentOrderByInput {
  startedAt: SortOrder
}

input RegisterAgentInput {
  secretKey: SecretKey!
  os: OsInfo!
  version: String!
  name: String!
  connectionId: String!
}

input OsInfo {
  arch: String!
  platform: String!
}

input RemoteNativeFeedInput {
  nativeFeedUrl: String!
}

input ScheduledRefreshRate {
  expression: String!
}

type ScrapedFeeds {
  genericFeeds: [TransientGenericFeed!]!
  nativeFeeds: [RemoteNativeFeed!]
}

type ScrapedReadability {
  url: String
  imageUrl: String
  title: String
  contentText: String
  content: String
  contentMime: String
  faviconUrl: String
  date: String
}

input SecretKey {
  email: String!
  secretKey: String!
}

input SegmentInput {
  digest: Boolean!
  size: Int!
  orderAsc: Boolean!
  orderBy: String!
}

input SelectorsInput {
  contextXPath: String!
  dateIsStartOfEvent: Boolean!
  dateXPath: String!
  paginationXPath: String!
  extendContext: ExtendContentOptions!
  linkXPath: String!
}

input StringArrayFilter {
  every: [String!]
  some: [String!]
}

input StringFilter {
  equals: String
  in: [String!]
#  notIn: [String!]
}

input StringUpdateOperationsInput {
  set: String!
}

input LongUpdateOperationsInput {
  set: Long!
}

input SubmitAgentDataInput {
  corrId: ID!
  callbackId: ID!
  scrapeResponse: ScrapeResponseInput!
}

input UpdateCurrentUserInput {
  email: StringUpdateOperationsInput
  firstName: StringUpdateOperationsInput
  lastName: StringUpdateOperationsInput
  country: StringUpdateOperationsInput
  acceptedTermsAndServices: BoolUpdateOperationsInput
  purgeScheduledFor: NullableUpdateOperationsInput
  dateFormat: StringUpdateOperationsInput
  timeFormat: StringUpdateOperationsInput
  plan: StringUpdateOperationsInput
  notificationsLastViewedAt: LongUpdateOperationsInput
}

input UserSecretCreateInput {
  type: UserSecretType!
}

input UserSecretWhereInput {
  in: [ID!]!
}

input VisibilityOneOfInput {
  oneOf: [Visibility!]!
}

input VisibilityUpdateOperationsInput {
  set: Visibility!
}

input WebDocumentUniqueWhereInput {
  id: ID!
}

input WebDocumentWhereInput {
  where: WebDocumentUniqueWhereInput!
}

type ScrapeResponse {
  failed: Boolean!
  errorMessage: String
  logs: [String!]!
  outputs: [ScrapeOutputResponse!]!
}

type ScrapeOutputResponse {
  index: Int!
  response: ScrapeActionResponse!
}


type ScrapeActionResponse {
  fetch: HttpFetchResponse
  extract: ScrapeExtractResponse
  execute: PluginExecutionResponse
#  click: DOMElement
#  type: DOMActionType
#  wait: WaitAction
#  select: DOMActionSelect
#  header: RequestHeader
#  purge: DOMElementByXPath
}

input ScrapeActionResponseInput {
  fetch: HttpFetchResponseInput
  extract: ScrapeExtractResponseInput
#  execute: PluginExecutionResponseInput
#  click: DOMElement
#  type: DOMActionType
#  wait: WaitAction
#  select: DOMActionSelect
#  header: RequestHeader
#  purge: DOMElementByXPath
}

type HttpFetchResponse {
  data: String!
  debug: FetchActionDebugResponse!
}

input HttpFetchResponseInput {
  data: String!
  debug: FetchActionDebugResponseInput!
}

type ScrapeExtractResponse {
  fragmentName: String!
  fragments: [ScrapeExtractFragment!]!
}

input ScrapeExtractResponseInput {
  fragmentName: String!
  fragments: [ScrapeExtractFragmentInput!]!
}

type ScrapeExtractFragment {
  html: TextData
  text: TextData
  data: MimeData
  extracts: [ScrapeExtractResponse!]
}

input ScrapeExtractFragmentInput {
  html: TextDataInput
  text: TextDataInput
  data: MimeDataInput
  extracts: [ScrapeExtractResponseInput!]
}

type PluginExecutionResponse {
  pluginId: ID!
  data: PluginExecutionData!
}

type PluginExecutionData {
  org_feedless_feed: RemoteNativeFeed
  org_feedless_feeds: ScrapedFeeds
#  org_feedless_diff_email_forward: DiffEmailForwardParams
#  org_feedless_filter: [CompositeFilterParams!]
  jsonData: String
  org_feedless_fulltext: ScrapedReadability
#  org_feedless_conditional_tag: [ConditionalTag!]
}

type JsonData {
  jsonSchema: String!
  jsonData: String!
}

type MimeData {
  mimeType: String!
  data: String!
}

type TextData {
  data: String!
}

input ScrapeRequestUpdateInput {
  where: ScrapeSourceUniqueWhereInput!
  data: ScrapeRequestUpdateDataInput!
}

input ScrapeRequestUpdateDataInput {
  tags: StringArrayUpdateOperationsInput
  title: StringUpdateOperationsInput
  localized: NullableUpdateGeoPointInput
}

input NullableUpdateGeoPointInput {
  set: GeoPointInput
}

input ScrapeSourceUniqueWhereInput {
  id: ID!
}

input ScrapeRequestInput {
  corrId: ID
  id: ID
  title: String!
  flow: ScrapeFlowInput!
  errornous: Boolean
  localized: GeoPointInput
  tags: [String!]
  lastErrorMessage: String
}

input GeoPointInput {
  lat: Float!
  lon: Float!
}

input ScrapeBoundingBoxInput {
  boundingBox: BoundingBoxInput!
}

input PluginExecutionParamsInput {
  org_feedless_feed: FeedParamsInput
  org_feedless_diff_email_forward: DiffEmailForwardParamsInput
  org_feedless_filter: [CompositeFilterParamsInput!]
  jsonData: String
  org_feedless_fulltext: FulltextPluginParamsInput
  org_feedless_conditional_tag: [ConditionalTagInput!]
}

input FeedParamsInput {
  generic: SelectorsInput
}

input ConditionalTagInput {
  tag: String!
  filter: CompositeFieldFilterParamsInput!
}
input CompositeFilterParamsInput {
  exclude: CompositeFieldFilterParamsInput
  include: CompositeFieldFilterParamsInput
}

input CompositeFieldFilterParamsInput {
  index: NumericalFilterParamsInput
  title: StringFilterParamsInput
  content: StringFilterParamsInput
  link: StringFilterParamsInput
}

input StringFilterParamsInput {
  operator: StringFilterOperator!
  value: String!
}

input NumericalFilterParamsInput {
  operator: NumberFilterOperator!
  value: Int!
}

input DiffEmailForwardParamsInput {
  nextItemMinIncrement: Float!
  compareBy: CompareByInput!
  inlineDiffImage: Boolean
  inlineLatestImage: Boolean
  inlinePreviousImage: Boolean
}

input CompareByInput {
  fragmentNameRef: String
  field: WebDocumentField!
}

input FulltextPluginParamsInput {
  readability: Boolean!
  inheritParams: Boolean!
}

enum FeedlessPlugins {
  org_feedless_feed
  org_feedless_feeds
  org_feedless_fulltext
  org_feedless_filter
  org_feedless_conditional_tag
  org_feedless_privacy
  org_feedless_detect_media
  org_feedless_diff_email_forward
}

enum WebDocumentField {
  pixel
  text
  markup
}

type ScrapeRequest {
  corrId: ID!
  id: ID!
  title: String!
  flow: ScrapeFlow!
  errornous: Boolean
  localized: GeoPoint
  tags: [String!]
  lastErrorMessage: String
}

type GeoPoint {
  lat: Float!
  lon: Float!
}

type ScrapeBoundingBox {
  boundingBox: BoundingBox!
}

type PluginExecution {
  pluginId: ID!
  params: PluginExecutionParams!
}

type PluginExecutionParams {
  org_feedless_feed: FeedParams
  org_feedless_diff_email_forward: DiffEmailForwardParams
  org_feedless_filter: [CompositeFilterParams!]
  jsonData: String
  org_feedless_fulltext: FulltextPluginParams
  org_feedless_conditional_tag: [ConditionalTag!]
}

type FeedParams {
  generic: Selectors
}

type ConditionalTag {
  tag: String!
  filter: CompositeFieldFilterParams!
}


type CompositeFilterParams {
  exclude: CompositeFieldFilterParams
  include: CompositeFieldFilterParams
}

type CompositeFieldFilterParams {
  index: NumericalFilterParams
  title: StringFilterParams
  content: StringFilterParams
  link: StringFilterParams
}

type StringFilterParams {
  operator: StringFilterOperator!
  value: String!
}

type NumericalFilterParams {
  operator: NumberFilterOperator!
  value: Int!
}


type DiffEmailForwardParams {
  nextItemMinIncrement: Float!
  compareBy: CompareBy!
  inlineDiffImage: Boolean
  inlineLatestImage: Boolean
  inlinePreviousImage: Boolean
}

type CompareBy {
  fragmentNameRef: String
  field: WebDocumentField!
}

type FulltextPluginParams {
  readability: Boolean!
  inheritParams: Boolean!
}

input ScrapeResponseInput {
  failed: Boolean!
  errorMessage: String
  logs: [String!]!
  outputs: [ScrapeOutputResponseInput!]!
}

input ScrapeOutputResponseInput {
  index: Int!
  response: ScrapeActionResponseInput!
}

input JsonDataInput {
  jsonSchema: String!
  jsonData: String!
}

input MimeDataInput {
  mimeType: String!
  data: String!
}

input TextDataInput {
  data: String!
}
