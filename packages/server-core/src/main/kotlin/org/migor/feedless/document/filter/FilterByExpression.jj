options {
    STATIC = false;
    IGNORE_CASE = true;
}

PARSER_BEGIN(FilterByExpression)

package org.migor.feedless.document.filter.generated;

import org.apache.commons.lang3.StringUtils;
import java.util.Arrays;
import java.util.List;
import java.util.LinkedList;
import org.migor.feedless.feed.parser.json.JsonItem;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FilterByExpression {

  private final Logger log = LoggerFactory.getLogger(FilterByExpression.class);

//  javacc *.jj
//  javac *.java
//  java FilterExprParser < input.txt
//
//  public static void main(String[] args) throws Exception {
//    Scanner scanner = new Scanner(System.in);
//
//    while(scanner.hasNextLine()) {
//      String line = scanner.nextLine();
//      FilterByExpression parser = new FilterByExpression(new ByteArrayInputStream(line.getBytes()));
//      System.out.println(line + " -> " + parser.matches(null));
//    }
//  }

  private String strField(String fieldName, JsonItem data) {
    switch (fieldName) {
      case "content": return data.getText();
      case "title": return data.getTitle();
      case "raw": return data.getHtml();
      case "url": return data.getUrl();
      case "any": return data.getText() + " " + data.getTitle() + " " + data.getHtml() + " " + data.getUrl();
    }
    throw new RuntimeException("Field '" + fieldName + "' is not supported");
  }

  private double numField(String fieldName, JsonItem data) {
    switch (fieldName) {
      case "linkCount": return (double) this.linkCount(data.getHtml());
//      case "score": return entry.getScore();
    }
    throw new RuntimeException("Field '" + fieldName + "' is not supported");
  }

  private boolean containsInAny(JsonItem data, String search) {
    return StringUtils.containsIgnoreCase(this.strField("any", data), search);
  }

  private int linkCount(String val) {
      return 0;
  }
  private int wordCount(String val) {
    return (int) Arrays.stream(StringUtils.split(val, " ,;:'.!?"))
//      .filter(StringUtils::isNotBlank)
      .count();
  }

  private int sentenceCount(String val) {
    return (int) Arrays.stream(StringUtils.split(val, ";.!?"))
//        .filter(StringUtils::isNotBlank)
        .count();
  }

  private List<Boolean> merge(boolean head, List<Boolean> tail) {
      List<Boolean> merged = new LinkedList<Boolean>();
      merged.add(head);
      merged.addAll(tail);
      return merged;
  }

  private Boolean allTrue(List<Boolean> list) {
      boolean hasTrue = false;
      for (Boolean b : list) {
          if (!b) {
              return false;
          }
      }
      return true;
  }
}

PARSER_END(FilterByExpression)


SKIP : { " "|"\n"|"\r"|"\r\n" }
TOKEN : { <STR_FIELD : "title" | "content" | "raw" | "url" | "any" > }
TOKEN : { <NUM_FIELD : "score" | "linkCount" > }
TOKEN : { <WORDS : "words" > }
TOKEN : { <LENGTH : "len" > }
TOKEN : { <GT : ">" > }
TOKEN : { <LT :  "<" > }
TOKEN : { <EQ :  "==" > }
TOKEN : { <BOOL : "true" | "false" > }
TOKEN : { <AND : "and" > }
TOKEN : { <OR : "or" > }
TOKEN : { <QUOTE : "'" > }
TOKEN : { <LBRAKE : "(" > }
TOKEN : { <RBRAKE : ")" > }
TOKEN : { <COMMA : "," > }
TOKEN : { <NOT : "not" | "!" > }
TOKEN : { <CONTAINS : "contains" > }
TOKEN : { <ENDSWITH : "endsWith" > }
TOKEN : { <STARTSWITH : "startsWith" > }
TOKEN : { <NUMBER : (["0"-"9"])+ > }
TOKEN : { <STRING_LITERAL : "'" (~["'"])+ "'" > }

public boolean matches(JsonItem data) throws Exception :
{ boolean b; }
{
    b = CombineBoolExpr(data)
    <EOF>
   { return b; }
}

private List<Boolean> CombineMultipleBoolExpr(JsonItem data) throws Exception :
{  Token t; boolean boolHead = false; List<Boolean> boolTail; }
{
      boolHead = CombineBoolExpr(data)
      (<COMMA>
        boolTail = CombineMultipleBoolExpr(data)
        { return merge(boolHead, boolTail); }
      |
        { return List.of(boolHead); }
      )
}

private boolean CombineBoolExpr(JsonItem data) throws Exception :
{  Token t; boolean boolHead; List<Boolean> boolTail; }
{
      <LBRAKE>
      boolHead = CombineBoolExpr(data)
      <RBRAKE>
      {  return boolHead;  }
  |
      <NOT>
      boolHead = CombineBoolExpr(data)
      {  return !boolHead;  }
  |

      <AND>
      <LBRAKE>
      boolHead = CombineBoolExpr(data)
      <COMMA>
      boolTail = CombineMultipleBoolExpr(data)
      <RBRAKE>
      {  return allTrue(merge(boolHead, boolTail));  }
  |

      <OR>
      <LBRAKE>
      boolHead = CombineBoolExpr(data)
      <COMMA>
      boolTail = CombineMultipleBoolExpr(data)
      <RBRAKE>
      {  return merge(boolHead, boolTail).contains(true);  }
  |
      {  return BoolExpr(data);  }
}


private boolean BoolExpr(JsonItem data) throws Exception :
{  Token t; boolean result; }
{
  t = <BOOL>
  {  return Boolean.parseBoolean( t.image );  }

  |

  result = StringExpr(data)
  { return result; }

  |

  result = NumberExpr(data)
  { return result; }
}

private boolean StringExpr(JsonItem data) throws Exception :
{  String strA, strB; boolean result; }
{
  <ENDSWITH>
  <LBRAKE>
  strA = StringValue(data)

  <COMMA>
  strB = StringValue(data)
  {
    log.debug("endsWith "+strA+" "+strB);
    result = StringUtils.endsWithIgnoreCase(strA, strB);  }
  <RBRAKE>
  { return result; }
|
  <STARTSWITH>
  <LBRAKE>
  strA = StringValue(data)

  <COMMA>
  strB = StringValue(data)
  {
    log.debug("startsWith "+strA+" "+strB);
    result = StringUtils.startsWithIgnoreCase(strA, strB);  }
  <RBRAKE>
  { return result; }
|
  <CONTAINS>
  <LBRAKE>
  strA = StringValue(data)
  (
    <COMMA>
    strB = StringValue(data)
    {  result = StringUtils.containsIgnoreCase(strA, strB);  }
    <RBRAKE>
    { return result; }

  |

    {  result = containsInAny(data, strA);  }
    <RBRAKE>
    { return result; }

  )

}

private String StringValue(JsonItem data) throws Exception :
{  Token t; }
{
  t = <STRING_LITERAL>
  {
    String s = t.image;
    return s.substring(1, s.length() - 1);
  }

  |

  t = <STR_FIELD>
  {  return strField( t.image, data );  }

}


private boolean NumberExpr(JsonItem data) throws Exception :
{  double a, b; String str; }
{
    a = Number(data)
    (
      <GT>
      b = Number(data)
      {  return a > b; }

      |

      <LT>
      b = Number(data)
      {  return a < b; }

      |

      <EQ>
      b = Number(data)
      {  return a == b; }
    )
}


private double Number(JsonItem data) throws Exception :
{  Token t; int i; }
{
  t = <NUMBER>
  {  return Double.parseDouble( t.image );  }

  |

  t = <NUM_FIELD>
  {  return numField( t.image, data );  }

  |

  i = len(data)
  {  return (double)i; }

  |

  i = words(data)
  {  return (double)i; }

}

private int len(JsonItem data) throws Exception :
{  String str; }
{
    <LENGTH>
    <LBRAKE>
    str = StringValue(data)
    <RBRAKE>
    { return str.length(); }

}

private int words(JsonItem data) throws Exception :
{  String str; }
{
    <WORDS>
    <LBRAKE>
    str = StringValue(data)
    <RBRAKE>
    { return wordCount(str); }

}
